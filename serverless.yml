service: converterservices
frameworkVersion: "2"

plugins:
  - serverless-offline
  - serverless-plugin-tracing
  - serverless-prune-plugin
  - serverless-aws-documentation
  - serverless-latest-layer-version
provider:
  name: aws
  runtime: python3.7
  lambdaHashingVersion: 20201221
  memorySize: 512
  timeout: 15
  region: ${file(./config.${self:provider.stage}.json):REGION}
  stage: ${opt:stage,'dev'}
  deploymentBucket:
    name: snet-serverless-artifacts # Deployment bucket name. Default is generated by the framework
    serverSideEncryption: AES256 # when using server-side encryption
    tags: # Tags that will be added to each of the deployment resources
      key1: converter-service
  deploymentPrefix: serverless
  tracing: true

custom:
  prune:
    automatic: true
    includeLayers: true
    number: 5
  defaultLayers:
    - ${file(./config.${self:provider.stage}.json):MplaceCommonCode_Layer}
    - ${file(./config.${self:provider.stage}.json):MplaceCommonPythonLib_Layer}
    - ${file(./config.${self:provider.stage}.json):MplacePythonWeb3AndGrpc_Layer}
  defaultVpc:
    securityGroupIds:
      - ${file(./config.${self:provider.stage}.json):SG1}
      - ${file(./config.${self:provider.stage}.json):SG2}
    subnetIds:
      - ${file(./config.${self:provider.stage}.json):VPC1}
      - ${file(./config.${self:provider.stage}.json):VPC2}
  defaultCors:
    origin: ${file(./config.${self:provider.stage}.json):ORIGIN}
    headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
      - x-requested-with
  documentation:
    models:
      - name: "ApiErrorMessage"
        description: "API Error Response"
        contentType: "application/json"
        schema: ${file(documentation/models/error.json):ApiError}

      - name: "LambdaErrorMessage"
        description: "Server is not able to process the client request"
        contentType: "application/json"
        schema: ${file(documentation/models/error.json):LambdaError}

      - name: "GetAllBlockchainOutput"
        description: "Get all blockchain response model"
        contentType: "application/json"
        schema: ${file(documentation/models/blockchain.json):GetAllBlockchainOutput}

      - name: "GetAllTokenPairOutput"
        description: "Get all token pair response model"
        contentType: "application/json"
        schema: ${file(documentation/models/token.json):GetAllTokenPairOutput}

      - name: "CreateConversionRequestInput"
        description: "create a conversion request model"
        contentType: "application/json"
        schema: ${file(documentation/models/conversion.json):CreateConversionRequestInput}
      
      - name: "CreateConversionRequestOutput"
        description: "create a conversion response model"
        contentType: "application/json"
        schema: ${file(documentation/models/conversion.json):CreateConversionRequestOutput}

      - name: "GetConversionHistoryInput"
        description: "Get the conversion history request  model"
        contentType: "application/json"
        schema: ${file(documentation/models/conversion.json):GetConversionHistoryInput}

      - name: "GetConversionHistoryOutput"
        description: "Get the conversion history response model"
        contentType: "application/json"
        schema: ${file(documentation/models/conversion.json):GetConversionHistoryOutput}

      - name: "CreateTransactionForConversionInput"
        description: "Create a transaction for the conversion request model"
        contentType: "application/json"
        schema: ${file(documentation/models/conversion.json):CreateTransactionForConversionInput}

      - name: "CreateTransactionForConversionOutput"
        description: "Create a transaction for the conversion response model"
        contentType: "application/json"
        schema: ${file(documentation/models/conversion.json):CreateTransactionForConversionOutput}

package:
  patterns:
    - "!.circleci/**"
    - "!.gitignore/**"
    - "!.serverless/**"
    - "!requirements.txt"
    - "!venv/**"
    - "!serverless.yml"
    - "!test/**"
    - "!tests/**"
    - "!repository/**"
    - "!Readme.md"
    - "!package.json"
    - "!Dockerfile"
    - "!License"
    - "!node_modules/**"
    - "!common"
    - "!testcases"


resources:
  Resources:
    onlyParams:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'Validate Parameters'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: false
        ValidateRequestParameters: true

    onlyBody:
      Type: "AWS::ApiGateway::RequestValidator"
      Properties:
        Name: 'Validate body, Parameters'
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: true

functions:
  get_all_blockchain:
    handler: application/handler/blockchain_handlers.get_all_blockchain
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpc}
    layers: ${self:custom.defaultLayers}
    events:
      - http:
          path: /v1/blockchain
          method: get
          cors: ${self:custom.defaultCors}
          documentation:
            summary: "Get all blockchain"
            description: "Get all blockchain for the converter bridge"
            tags:
              - "Blockchain"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Get all blockchain"
                responseModels:
                  "application/json": "GetAllBlockchainOutput"
              - statusCode: "403"
                responseModels:
                  "application/json": "ApiErrorMessage"
              - statusCode: "404"
                responseModels:
                  "application/json": "LambdaErrorMessage"
              - statusCode: "500"
                responseModels:
                  "application/json": "LambdaErrorMessage"

  get_token_pair:
    handler: application/handler/token_handlers.get_all_token_pair
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpc}
    layers: ${self:custom.defaultLayers}
    events:
      - http:
          path: /v1/token/pair
          method: get
          cors: ${self:custom.defaultCors}
          documentation:
            summary: "Get all token pair"
            description: "Get all token pair for the converter bridge"
            tags:
              - "Token"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Get all token pair"
                responseModels:
                  "application/json": "GetAllTokenPairOutput"
              - statusCode: "403"
                responseModels:
                  "application/json": "ApiErrorMessage"
              - statusCode: "404"
                responseModels:
                  "application/json": "LambdaErrorMessage"
              - statusCode: "500"
                responseModels:
                  "application/json": "LambdaErrorMessage"

  create_conversion_request:
    handler: application/handler/conversion_handlers.create_conversion_request
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpc}
    layers: ${self:custom.defaultLayers}
    events:
      - http:
          path: /v1/conversion
          method: post
          cors: ${self:custom.defaultCors}
          reqValidatorName: onlyBody
          documentation:
            summary: "Create a conversion request"
            description: "Create a conversion request"
            tags:
              - "Conversion"
            requestModels:
              "application/json": "CreateConversionRequestInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Successfully made a  conversion request"
                responseModels:
                  "application/json": "CreateConversionRequestOutput"
              - statusCode: "403"
                responseModels:
                  "application/json": "ApiErrorMessage"
              - statusCode: "404"
                responseModels:
                  "application/json": "LambdaErrorMessage"
              - statusCode: "500"
                responseModels:
                  "application/json": "LambdaErrorMessage"

  create_transaction_for_conversion:
    handler: application/handler/conversion_handlers.create_transaction_for_conversion
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpc}
    layers: ${self:custom.defaultLayers}
    events:
      - http:
          path: /v1/transaction
          method: post
          cors: ${self:custom.defaultCors}
          reqValidatorName: onlyBody
          documentation:
            summary: "Create a transaction for conversion request"
            description: "Create a transaction for conversion request"
            tags:
              - "Transaction"
            requestModels:
              "application/json": "CreateTransactionForConversionInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Create a transaction for conversion request"
                responseModels:
                  "application/json": "CreateTransactionForConversionOutput"
              - statusCode: "403"
                responseModels:
                  "application/json": "ApiErrorMessage"
              - statusCode: "404"
                responseModels:
                  "application/json": "LambdaErrorMessage"
              - statusCode: "500"
                responseModels:
                  "application/json": "LambdaErrorMessage"

  get_conversion_history:
    handler: application/handler/conversion_handlers.get_conversion_history
    role: ${file(./config.${self:provider.stage}.json):ROLE}
    vpc: ${self:custom.defaultVpc}
    layers: ${self:custom.defaultLayers}
    events:
      - http:
          path: /v1/conversion/history
          method: get
          cors: ${self:custom.defaultCors}
          reqValidatorName: onlyParams
          request:
            parameters:
              querystrings:
                address: true
                page_size: false
                page_number: false
          documentation:
            summary: "Getting the conversion history"
            description: "Getting the conversion history"
            tags:
              - "Conversion"
            requestModels:
              "application/json": "GetConversionHistoryInput"
            methodResponses:
              - statusCode: "200"
                responseBody:
                  description: "Getting the conversion history"
                responseModels:
                  "application/json": "GetConversionHistoryOutput"
              - statusCode: "403"
                responseModels:
                  "application/json": "ApiErrorMessage"
              - statusCode: "404"
                responseModels:
                  "application/json": "LambdaErrorMessage"
              - statusCode: "500"
                responseModels:
                  "application/json": "LambdaErrorMessage"


